% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow.R
\name{SBCWorkflow}
\alias{SBCWorkflow}
\title{R6 class representing a fluid SBC workflow, boasting a highly customizable pipeline and supports intermediate updates}
\description{
R6 class representing a fluid SBC workflow, boasting a highly customizable pipeline and supports intermediate updates

R6 class representing a fluid SBC workflow, boasting a highly customizable pipeline and supports intermediate updates
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{cmdstan_model}}{A CmdStanModel object used for SBC}

\item{\code{brms_model_fit}}{A brmsfit object used for SBC}

\item{\code{sim_function}}{If using CmdStanModel, a simulator function, which should return simulated prior and data samples for SBC. Please refer \code{SBCWorkflow$initialize()} for details.}

\item{\code{calculated_ranks}}{A named list of vectors which contained calculated ranks, or NULL if not calculated.}

\item{\code{prior_samples}}{A posterior::draws_rvars of dimension(n_iterations=1, n_chains=n_sbc_iterations, n_variables=n_variables) which stores prior samples}

\item{\code{simulated_y}}{A posterior::draws_rvars of dimension(n_iterations=n_simulated_y, n_chains=n_sbc_iterations, n_variables=1), which stores simulated y as "y"}

\item{\code{posterior_samples}}{A posterior::draws_Rvars of dimension(n_iterations=n_posterior_samples, n_chains=n_sbc_iterations, n_variables=n_variables), which stores fitted posterior samples}

\item{\code{thin_factor}}{Non-negative integer representing posterior thinning interval
R6 Initializer for SBCWorkflow}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SBCWorkflow$new()}}
\item \href{#method-simulate}{\code{SBCWorkflow$simulate()}}
\item \href{#method-fit_model}{\code{SBCWorkflow$fit_model()}}
\item \href{#method-calculate_rank}{\code{SBCWorkflow$calculate_rank()}}
\item \href{#method-add_steps}{\code{SBCWorkflow$add_steps()}}
\item \href{#method-clone}{\code{SBCWorkflow$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$new(model_obj, sim_function)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{model_obj}}{A CmdStanModel or brmsfit object to use for fitting data.}

\item{\code{sim_function}}{If using CmdStanModel, a simulator function. The function must return a
named list with elements \code{parameters} and \code{generated}.
Parameters should be a named list containing prior samplers for
parameters. Generated must be a 1 dimensional vector containing
simulated y data generated from the \code{parameters} samples.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
Sample \eqn{\tilde{\theta} \sim P(\theta)} and \eqn{\tilde{y} \sim P(\tilde{y}) | \tilde{\theta} using \code{sim_function}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-simulate"></a>}}
\if{latex}{\out{\hypertarget{method-simulate}{}}}
\subsection{Method \code{simulate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$simulate(n_sbc_iterations, param = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n_sbc_iterations}}{Number of prior sample sets to generate. Equates to number of SBC iterations}

\item{\code{...}}{Additional arguments to be passed to \code{sim_function}
Sample \eqn{\widehat{\theta} \sim P(\widehat{\theta} | \tilde{y})} using the stan model.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-fit_model"></a>}}
\if{latex}{\out{\hypertarget{method-fit_model}{}}}
\subsection{Method \code{fit_model()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$fit_model(
  sample_iterations,
  warmup_iterations,
  data = list(),
  thin_factor = 3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sample_iterations}}{Number of sampling iterations. Equates to number of posterior samples}

\item{\code{warmup_iterations}}{Number of warmup iteratioins.}

\item{\code{data}}{List specifying data to be passed to the model. Note that \code{y} will be replaced with simulated \code{y} samples.}

\item{\code{thin_factor}}{Non-negative integer in which thinning should be applied. 1 equates to no thinning being done.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of named lists containing posterior samples for each parameter.
Calculate rank statistics for a given parameter name
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-calculate_rank"></a>}}
\if{latex}{\out{\hypertarget{method-calculate_rank}{}}}
\subsection{Method \code{calculate_rank()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$calculate_rank(param = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{param}}{list of parameter names to calculate. If not given, calculate for all available parameters.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_steps"></a>}}
\if{latex}{\out{\hypertarget{method-add_steps}{}}}
\subsection{Method \code{add_steps()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$add_steps(N)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SBCWorkflow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
